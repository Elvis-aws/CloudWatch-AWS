AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - AWS WAF to Amazon API Gateway REST

Resources:
  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn
  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
  # Log group
  MyLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: demo-apigateway-log-group

  # Alarm
  MyApiGatewayAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "API Gateway Latency Alarm"
      AlarmActions:
        - !Ref MySNSTopic
      MetricName: "Latency"
      Namespace: "AWS/ApiGateway"
      Dimensions:
        - Name: "ApiName"
          Value: "MyApi"
        - Name: "Stage"
          Value: "prod"
      Statistic: "Average"
      Period: "60"
      EvaluationPeriods: "5"
      Threshold: "500"
      ComparisonOperator: "GreaterThanThreshold"

  # SNS Topic
  MySNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: "My SNS Topic"

  # Subscription
  MySNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Protocol: "email"
      TopicArn: !Ref MySNSTopic
      Endpoint: "ngwesseaws@gmail.com"

  # Amazon API gateway REST API
  MyApi: 
    Type: AWS::Serverless::Api
    DependsOn: ApiGwAccountConfig
    Properties: 
      StageName: Prod
      MethodSettings:
        - LoggingLevel: INFO
          MetricsEnabled: True
          ResourcePath: '/*' # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
      EndpointConfiguration: REGIONAL
      TracingEnabled: true # Enable tracing with Amazon X-Ray
      AccessLogSetting: # Enable access logging with Amazon CloudWatch
        DestinationArn: !GetAtt MyLogGroup.Arn
        Format: >
          {"requestId":"$context.requestId",
          "waf-error":"$context.waf.error",
          "waf-status":"$context.waf.status",
          "waf-latency":"$context.waf.latency",
          "waf-response":"$context.wafResponseCode",
          "authenticate-error":"$context.authenticate.error",
          "authenticate-status":"$context.authenticate.status",
          "authenticate-latency":"$context.authenticate.latency",
          "authorize-error":"$context.authorize.error",
          "authorize-status":"$context.authorize.status",
          "authorize-latency":"$context.authorize.latency",
          "integration-error":"$context.integration.error",
          "integration-status":"$context.integration.status",
          "integration-latency":"$context.integration.latency",
          "integration-requestId":"$context.integration.requestId",
          "integration-integrationStatus":"$context.integration.integrationStatus",
          "response-latency":"$context.responseLatency",
          "status":"$context.status"}

  # Lambda function as an example microservice behind the API Gateway REST endpoint
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.lambda_handler
      Runtime: python3.9
      Events:
        RootGet:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref MyApi

Outputs:
  # API endpoint for testing
  ApiEndpoint:
    Description: API endpoint URL
    Value: !Sub https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
  LogGroupName:
    Description: Name of the log group
    Value: !Ref MyLogGroup